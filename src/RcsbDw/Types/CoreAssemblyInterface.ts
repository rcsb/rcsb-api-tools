/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * JSON schema for assembly level core data. Combines RCSB Exchange Database schema: json-schema-min-pdbx_core_assembly.json and RCSB Data Warehouse schema: json-schema-core_assembly.json
 */
export interface CoreAssembly {
  pdbx_struct_assembly?: {
    /**
     * A description of special aspects of the macromolecular assembly.
     *
     *                In the PDB, 'representative helical assembly', 'complete point assembly',
     * 	       'complete icosahedral assembly', 'software_defined_assembly', 'author_defined_assembly',
     * 	       and 'author_and_software_defined_assembly' are considered "biologically relevant assemblies.
     */
    details?: string;
    /**
     * The value of _pdbx_struct_assembly.id must uniquely identify a record in
     *  the PDBX_STRUCT_ASSEMBLY list.
     */
    id: string;
    /**
     * Provides details of the method used to determine or
     *  compute the assembly.
     */
    method_details?: string;
    /**
     * The number of polymer molecules in the assembly.
     */
    oligomeric_count?: number;
    /**
     * Provides the details of the oligomeric state of the assembly.
     */
    oligomeric_details?: string;
    /**
     * Candidate macromolecular assembly.
     *
     *  Excludes the following cases classified in pdbx_struct_asembly.details:
     *
     *  'crystal asymmetric unit', 'crystal asymmetric unit, crystal frame', 'helical asymmetric unit',
     *  'helical asymmetric unit, std helical frame','icosahedral 23 hexamer', 'icosahedral asymmetric unit',
     *  'icosahedral asymmetric unit, std point frame','icosahedral pentamer', 'pentasymmetron capsid unit',
     *  'point asymmetric unit', 'point asymmetric unit, std point frame','trisymmetron capsid unit',
     *   and 'deposited_coordinates'.
     */
    rcsb_candidate_assembly?: "N" | "Y";
    /**
     * A filtered description of the macromolecular assembly.
     */
    rcsb_details?: "author_and_software_defined_assembly" | "author_defined_assembly" | "software_defined_assembly";
  };
  /**
   * @minItems 1
   */
  pdbx_struct_assembly_auth_evidence?: [
    {
      /**
       * This item references an assembly in pdbx_struct_assembly
       */
      assembly_id: string;
      /**
       * Provides any additional information regarding the evidence of this assembly
       */
      details?: string;
      /**
       * Provides the experimental method to determine the state of this assembly
       */
      experimental_support?:
        | "NMR Distance Restraints"
        | "NMR relaxation study"
        | "SAXS"
        | "assay for oligomerization"
        | "cross-linking"
        | "electron microscopy"
        | "equilibrium centrifugation"
        | "fluorescence resonance energy transfer"
        | "gel filtration"
        | "homology"
        | "immunoprecipitation"
        | "isothermal titration calorimetry"
        | "light scattering"
        | "mass spectrometry"
        | "microscopy"
        | "native gel electrophoresis"
        | "none"
        | "scanning transmission electron microscopy"
        | "surface plasmon resonance";
      /**
       * Identifies a unique record in pdbx_struct_assembly_auth_evidence.
       */
      id: string;
    },
    ...{
      /**
       * This item references an assembly in pdbx_struct_assembly
       */
      assembly_id: string;
      /**
       * Provides any additional information regarding the evidence of this assembly
       */
      details?: string;
      /**
       * Provides the experimental method to determine the state of this assembly
       */
      experimental_support?:
        | "NMR Distance Restraints"
        | "NMR relaxation study"
        | "SAXS"
        | "assay for oligomerization"
        | "cross-linking"
        | "electron microscopy"
        | "equilibrium centrifugation"
        | "fluorescence resonance energy transfer"
        | "gel filtration"
        | "homology"
        | "immunoprecipitation"
        | "isothermal titration calorimetry"
        | "light scattering"
        | "mass spectrometry"
        | "microscopy"
        | "native gel electrophoresis"
        | "none"
        | "scanning transmission electron microscopy"
        | "surface plasmon resonance";
      /**
       * Identifies a unique record in pdbx_struct_assembly_auth_evidence.
       */
      id: string;
    }[]
  ];
  /**
   * @minItems 1
   */
  pdbx_struct_assembly_gen?: [
    {
      /**
       * This data item is a pointer to _pdbx_struct_assembly.id in the
       *  PDBX_STRUCT_ASSEMBLY category.
       */
      assembly_id?: string;
      asym_id_list?: string[];
      /**
       * Identifies the operation of collection of operations
       *  from category PDBX_STRUCT_OPER_LIST.
       *
       *  Operation expressions may have the forms:
       *
       *   (1)        the single operation 1
       *   (1,2,5)    the operations 1, 2, 5
       *   (1-4)      the operations 1,2,3 and 4
       *   (1,2)(3,4) the combinations of operations
       *              3 and 4 followed by 1 and 2 (i.e.
       *              the cartesian product of parenthetical
       *              groups applied from right to left)
       */
      oper_expression?: string;
      /**
       * This data item is an ordinal index for the
       *  PDBX_STRUCT_ASSEMBLY category.
       */
      ordinal: number;
    },
    ...{
      /**
       * This data item is a pointer to _pdbx_struct_assembly.id in the
       *  PDBX_STRUCT_ASSEMBLY category.
       */
      assembly_id?: string;
      asym_id_list?: string[];
      /**
       * Identifies the operation of collection of operations
       *  from category PDBX_STRUCT_OPER_LIST.
       *
       *  Operation expressions may have the forms:
       *
       *   (1)        the single operation 1
       *   (1,2,5)    the operations 1, 2, 5
       *   (1-4)      the operations 1,2,3 and 4
       *   (1,2)(3,4) the combinations of operations
       *              3 and 4 followed by 1 and 2 (i.e.
       *              the cartesian product of parenthetical
       *              groups applied from right to left)
       */
      oper_expression?: string;
      /**
       * This data item is an ordinal index for the
       *  PDBX_STRUCT_ASSEMBLY category.
       */
      ordinal: number;
    }[]
  ];
  /**
   * @minItems 1
   */
  pdbx_struct_assembly_prop?: [
    {
      /**
       * The identifier for the assembly used in category PDBX_STRUCT_ASSEMBLY.
       */
      assembly_id?: string;
      /**
       * The identifier for the assembly used in category PDBX_STRUCT_ASSEMBLY.
       */
      biol_id: string;
      /**
       * The property type for the assembly.
       */
      type: "ABSA (A^2)" | "MORE" | "SSA (A^2)";
      /**
       * The value of the assembly property.
       */
      value?: string;
    },
    ...{
      /**
       * The identifier for the assembly used in category PDBX_STRUCT_ASSEMBLY.
       */
      assembly_id?: string;
      /**
       * The identifier for the assembly used in category PDBX_STRUCT_ASSEMBLY.
       */
      biol_id: string;
      /**
       * The property type for the assembly.
       */
      type: "ABSA (A^2)" | "MORE" | "SSA (A^2)";
      /**
       * The value of the assembly property.
       */
      value?: string;
    }[]
  ];
  /**
   * @minItems 1
   */
  pdbx_struct_oper_list?: [
    {
      /**
       * This identifier code must uniquely identify a
       *  record in the PDBX_STRUCT_OPER_LIST list.
       */
      id: string;
      /**
       * The [1][1] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_1_1?: number;
      /**
       * The [1][2] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_1_2?: number;
      /**
       * The [1][3] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_1_3?: number;
      /**
       * The [2][1] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_2_1?: number;
      /**
       * The [2][2] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_2_2?: number;
      /**
       * The [2][3] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_2_3?: number;
      /**
       * The [3][1] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_3_1?: number;
      /**
       * The [3][2] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_3_2?: number;
      /**
       * The [3][3] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_3_3?: number;
      /**
       * A descriptive name for the transformation operation.
       */
      name?: string;
      /**
       * The symmetry operation corresponding to the transformation operation.
       */
      symmetry_operation?: string;
      /**
       * A code to indicate the type of operator.
       */
      type?:
        | "2D crystal symmetry operation"
        | "3D crystal symmetry operation"
        | "build 2D crystal asymmetric unit"
        | "build 3D crystal asymmetric unit"
        | "build helical asymmetric unit"
        | "build point asymmetric unit"
        | "crystal symmetry operation"
        | "helical symmetry operation"
        | "identity operation"
        | "point symmetry operation"
        | "transform to 2D crystal frame"
        | "transform to 3D crystal frame"
        | "transform to crystal frame"
        | "transform to helical frame"
        | "transform to point frame";
      /**
       * The [1] element of the three-element vector component of the
       *  transformation operation.
       */
      vector_1?: number;
      /**
       * The [2] element of the three-element vector component of the
       *  transformation operation.
       */
      vector_2?: number;
      /**
       * The [3] element of the three-element vector component of the
       *  transformation operation.
       */
      vector_3?: number;
    },
    ...{
      /**
       * This identifier code must uniquely identify a
       *  record in the PDBX_STRUCT_OPER_LIST list.
       */
      id: string;
      /**
       * The [1][1] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_1_1?: number;
      /**
       * The [1][2] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_1_2?: number;
      /**
       * The [1][3] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_1_3?: number;
      /**
       * The [2][1] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_2_1?: number;
      /**
       * The [2][2] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_2_2?: number;
      /**
       * The [2][3] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_2_3?: number;
      /**
       * The [3][1] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_3_1?: number;
      /**
       * The [3][2] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_3_2?: number;
      /**
       * The [3][3] element of the 3x3 matrix component of the
       *  transformation operation.
       */
      matrix_3_3?: number;
      /**
       * A descriptive name for the transformation operation.
       */
      name?: string;
      /**
       * The symmetry operation corresponding to the transformation operation.
       */
      symmetry_operation?: string;
      /**
       * A code to indicate the type of operator.
       */
      type?:
        | "2D crystal symmetry operation"
        | "3D crystal symmetry operation"
        | "build 2D crystal asymmetric unit"
        | "build 3D crystal asymmetric unit"
        | "build helical asymmetric unit"
        | "build point asymmetric unit"
        | "crystal symmetry operation"
        | "helical symmetry operation"
        | "identity operation"
        | "point symmetry operation"
        | "transform to 2D crystal frame"
        | "transform to 3D crystal frame"
        | "transform to crystal frame"
        | "transform to helical frame"
        | "transform to point frame";
      /**
       * The [1] element of the three-element vector component of the
       *  transformation operation.
       */
      vector_1?: number;
      /**
       * The [2] element of the three-element vector component of the
       *  transformation operation.
       */
      vector_2?: number;
      /**
       * The [3] element of the three-element vector component of the
       *  transformation operation.
       */
      vector_3?: number;
    }[]
  ];
  rcsb_assembly_container_identifiers: {
    /**
     * Assembly identifier for the container.
     */
    assembly_id: string;
    /**
     * Entry identifier for the container.
     */
    entry_id: string;
    /**
     * A unique identifier for each object in this assembly container formed by
     *  a dash separated concatenation of entry and assembly identifiers.
     */
    rcsb_id?: string;
    /**
     * List of binary interface Ids within the assembly (it points to interface id collection).
     */
    interface_ids?: string[];
  };
  rcsb_assembly_info?: {
    /**
     * Entity identifier for the container.
     */
    assembly_id?: string;
    /**
     * The assembly non-hydrogen atomic coordinate count.
     */
    atom_count?: number;
    /**
     * The assembly non-hydrogen branched entity atomic coordinate count.
     */
    branched_atom_count?: number;
    /**
     * The number of distinct branched entities in the generated assembly.
     */
    branched_entity_count?: number;
    /**
     * The number of branched instances in the generated assembly data set.
     *  This is the total count of branched entity instances generated in the assembly coordinate data.
     */
    branched_entity_instance_count?: number;
    /**
     * The assembly deuterated water molecule count.
     */
    deuterated_water_count?: number;
    /**
     * The PDB entry accession code.
     */
    entry_id: string;
    /**
     * The assembly hydrogen atomic coordinate count.
     */
    hydrogen_atom_count?: number;
    /**
     * The number of modeled polymer monomers in the assembly coordinate data.
     *  This is the total count of monomers with reported coordinate data for all polymer
     *  entity instances in the generated assembly coordinate data.
     */
    modeled_polymer_monomer_count?: number;
    /**
     * Nucleic acid polymer entity type categories describing the generated assembly.
     */
    na_polymer_entity_types?: "DNA (only)" | "DNA/RNA (only)" | "NA-hybrid (only)" | "Other" | "RNA (only)";
    /**
     * The assembly non-hydrogen non-polymer entity atomic coordinate count.
     */
    nonpolymer_atom_count?: number;
    /**
     * The number of distinct non-polymer entities in the generated assembly exclusive of solvent.
     */
    nonpolymer_entity_count?: number;
    /**
     * The number of non-polymer instances in the generated assembly data set exclusive of solvent.
     *  This is the total count of non-polymer entity instances generated in the assembly coordinate data.
     */
    nonpolymer_entity_instance_count?: number;
    /**
     * The assembly non-hydrogen polymer entity atomic coordinate count.
     */
    polymer_atom_count?: number;
    /**
     * Categories describing the polymer entity composition for the generated assembly.
     */
    polymer_composition?:
      | "DNA"
      | "DNA/RNA"
      | "NA-hybrid"
      | "NA/oligosaccharide"
      | "RNA"
      | "heteromeric protein"
      | "homomeric protein"
      | "oligosaccharide"
      | "other"
      | "other type composition"
      | "other type pair"
      | "protein/NA"
      | "protein/NA/oligosaccharide"
      | "protein/oligosaccharide";
    /**
     * The number of distinct polymer entities in the generated assembly.
     */
    polymer_entity_count?: number;
    /**
     * The number of distinct DNA polymer entities in the generated assembly.
     */
    polymer_entity_count_DNA?: number;
    /**
     * The number of distinct RNA polymer entities in the generated assembly.
     */
    polymer_entity_count_RNA?: number;
    /**
     * The number of distinct nucleic acid polymer entities (DNA or RNA) in the generated assembly.
     */
    polymer_entity_count_nucleic_acid?: number;
    /**
     * The number of distinct hybrid nucleic acid polymer entities in the generated assembly.
     */
    polymer_entity_count_nucleic_acid_hybrid?: number;
    /**
     * The number of distinct protein polymer entities in the generated assembly.
     */
    polymer_entity_count_protein?: number;
    /**
     * The number of polymer instances in the generated assembly data set.
     *  This is the total count of polymer entity instances generated in the assembly coordinate data.
     */
    polymer_entity_instance_count?: number;
    /**
     * The number of DNA polymer instances in the generated assembly data set.
     *  This is the total count of DNA polymer entity instances generated in the assembly coordinate data.
     */
    polymer_entity_instance_count_DNA?: number;
    /**
     * The number of RNA polymer instances in the generated assembly data set.
     *  This is the total count of RNA polymer entity instances generated in the assembly coordinate data.
     */
    polymer_entity_instance_count_RNA?: number;
    /**
     * The number of nucleic acid polymer instances in the generated assembly data set.
     *  This is the total count of nucleic acid polymer entity instances generated in the assembly coordinate data.
     */
    polymer_entity_instance_count_nucleic_acid?: number;
    /**
     * The number of hybrid nucleic acide polymer instances in the generated assembly data set.
     *  This is the total count of hybrid nucleic acid polymer entity instances generated in the assembly coordinate data.
     */
    polymer_entity_instance_count_nucleic_acid_hybrid?: number;
    /**
     * The number of protein polymer instances in the generated assembly data set.
     *  This is the total count of protein polymer entity instances generated in the assembly coordinate data.
     */
    polymer_entity_instance_count_protein?: number;
    /**
     * The number of polymer monomers in sample entity instances comprising the assembly data set.
     *  This is the total count of monomers for all polymer entity instances
     *  in the generated assembly coordinate data.
     */
    polymer_monomer_count?: number;
    /**
     * Selected polymer entity type categories describing the generated assembly.
     */
    selected_polymer_entity_types?: "Nucleic acid (only)" | "Other" | "Protein (only)" | "Protein/NA";
    /**
     * The assembly non-hydrogen solvent atomic coordinate count.
     */
    solvent_atom_count?: number;
    /**
     * The number of distinct solvent entities in the generated assembly.
     */
    solvent_entity_count?: number;
    /**
     * The number of solvent instances in the generated assembly data set.
     *  This is the total count of solvent entity instances generated in the assembly coordinate data.
     */
    solvent_entity_instance_count?: number;
    /**
     * The number of unmodeled polymer monomers in the assembly coordinate data. This is
     *  the total count of monomers with unreported coordinate data for all polymer
     *  entity instances in the generated assembly coordinate data.
     */
    unmodeled_polymer_monomer_count?: number;
    /**
     * Number of geometrically equivalent (i.e. same asym_ids on either side) polymer-polymer interfaces in the assembly
     */
    num_interfaces?: number;
    /**
     * Number of polymer-polymer interface entities, grouping equivalent interfaces at the entity level (i.e. same entity_ids on either side, with similar but not identical binding sites)
     */
    num_interface_entities?: number;
    /**
     * Number of homomeric (both partners are the same polymeric entity) interface entities
     */
    num_homomeric_interface_entities?: number;
    /**
     * Number of heteromeric (both partners are different polymeric entities) interface entities
     */
    num_heteromeric_interface_entities?: number;
    /**
     * Number of isologous (both binding sites are same, i.e. interface is symmetric) interface entities
     */
    num_isologous_interface_entities?: number;
    /**
     * Number of heterologous (both binding sites are different) interface entities
     */
    num_heterologous_interface_entities?: number;
    /**
     * Number of protein-protein interface entities
     */
    num_protein_interface_entities?: number;
    /**
     * Number of nucleic acid-nucleic acid interface entities
     */
    num_na_interface_entities?: number;
    /**
     * Number of protein-nucleic acid interface entities
     */
    "num_prot-na_interface_entities"?: number;
    /**
     * Total buried surface area calculated as the sum of buried surface areas over all interfaces
     */
    total_assembly_buried_surface_area?: number;
    /**
     * Total number of interfacing residues in the assembly, calculated as the sum of interfacing residues over all interfaces
     */
    total_number_interface_residues?: number;
  };
  /**
   * A unique identifier for each object in this assembly container formed by
   *  a dash separated concatenation of entry and assembly identifiers.
   */
  rcsb_id: string;
  /**
   * @minItems 1
   */
  rcsb_struct_symmetry?: [
    {
      /**
       * Symmetry symbol refers to point group or helical symmetry of identical polymeric subunits in Schönflies notation. Contains point group symbol (e.g., C2, C5, D2, T, O, I) or H for helical symmetry.
       */
      symbol: string;
      /**
       * Symmetry type refers to point group or helical symmetry of identical polymeric subunits. Contains point group types (e.g. Cyclic, Dihedral) or Helical for helical symmetry.
       */
      type: "Asymmetric" | "Cyclic" | "Dihedral" | "Tetrahedral" | "Octahedral" | "Icosahedral" | "Helical";
      /**
       * Stoichiometry of a complex represents the quantitative description and composition of its subunits.
       *
       * @minItems 1
       */
      stoichiometry: [string, ...string[]];
      /**
       * Oligomeric state refers to a composition of polymeric subunits in quaternary structure. Quaternary structure may be composed either exclusively of several copies of identical subunits, in which case they are termed homo-oligomers, or alternatively by at least one copy of different subunits (hetero-oligomers). Quaternary structure composed of a single subunit is denoted as 'Monomer'.
       */
      oligomeric_state: string;
      /**
       * Clusters describe grouping of 'identical' subunits.
       *
       * @minItems 1
       */
      clusters: [
        {
          /**
           * @minItems 1
           */
          members: [
            {
              /**
               * Internal chain ID used in mmCIF files to uniquely identify structural elements in the asymmetric unit.
               */
              asym_id: string;
              /**
               * Optional list of operator ids (pdbx_struct_oper_list.id) as appears in pdbx_struct_assembly_gen.oper_expression. One operator id per operand in the expression (most cases have only 1 operator). If it's not given then identity operator is assumed.
               *
               * @minItems 1
               */
              pdbx_struct_oper_list_ids?: [string, ...string[]];
            },
            ...{
              /**
               * Internal chain ID used in mmCIF files to uniquely identify structural elements in the asymmetric unit.
               */
              asym_id: string;
              /**
               * Optional list of operator ids (pdbx_struct_oper_list.id) as appears in pdbx_struct_assembly_gen.oper_expression. One operator id per operand in the expression (most cases have only 1 operator). If it's not given then identity operator is assumed.
               *
               * @minItems 1
               */
              pdbx_struct_oper_list_ids?: [string, ...string[]];
            }[]
          ];
          /**
           * Average RMSD between members of a given cluster.
           */
          avg_rmsd?: number;
        },
        ...{
          /**
           * @minItems 1
           */
          members: [
            {
              /**
               * Internal chain ID used in mmCIF files to uniquely identify structural elements in the asymmetric unit.
               */
              asym_id: string;
              /**
               * Optional list of operator ids (pdbx_struct_oper_list.id) as appears in pdbx_struct_assembly_gen.oper_expression. One operator id per operand in the expression (most cases have only 1 operator). If it's not given then identity operator is assumed.
               *
               * @minItems 1
               */
              pdbx_struct_oper_list_ids?: [string, ...string[]];
            },
            ...{
              /**
               * Internal chain ID used in mmCIF files to uniquely identify structural elements in the asymmetric unit.
               */
              asym_id: string;
              /**
               * Optional list of operator ids (pdbx_struct_oper_list.id) as appears in pdbx_struct_assembly_gen.oper_expression. One operator id per operand in the expression (most cases have only 1 operator). If it's not given then identity operator is assumed.
               *
               * @minItems 1
               */
              pdbx_struct_oper_list_ids?: [string, ...string[]];
            }[]
          ];
          /**
           * Average RMSD between members of a given cluster.
           */
          avg_rmsd?: number;
        }[]
      ];
      /**
       * Specifies a single or multiple rotation axes through the same point.
       *
       * @minItems 1
       */
      rotation_axes?: [
        {
          /**
           * Describes x,y,z coordinate of the start point of the symmetry axis.
           *
           * @minItems 3
           * @maxItems 3
           */
          start: [number, number, number];
          /**
           * Describes x,y,z coordinates of the end point of the symmetry axis.
           *
           * @minItems 3
           * @maxItems 3
           */
          end: [number, number, number];
          /**
           * The number of times (order of rotation) that a subunit can be repeated by a rotation operation, being transformed into a new state indistinguishable from its starting state.
           */
          order?: number;
        },
        ...{
          /**
           * Describes x,y,z coordinate of the start point of the symmetry axis.
           *
           * @minItems 3
           * @maxItems 3
           */
          start: [number, number, number];
          /**
           * Describes x,y,z coordinates of the end point of the symmetry axis.
           *
           * @minItems 3
           * @maxItems 3
           */
          end: [number, number, number];
          /**
           * The number of times (order of rotation) that a subunit can be repeated by a rotation operation, being transformed into a new state indistinguishable from its starting state.
           */
          order?: number;
        }[]
      ];
      /**
       * The granularity at which the symmetry calculation is performed. In 'Global Symmetry' all polymeric subunits in assembly are used. In 'Local Symmetry' only a subset of polymeric subunits is considered. In 'Pseudo Symmetry' the threshold for subunits similarity is relaxed.
       */
      kind: "Global Symmetry" | "Pseudo Symmetry" | "Local Symmetry";
    },
    ...{
      /**
       * Symmetry symbol refers to point group or helical symmetry of identical polymeric subunits in Schönflies notation. Contains point group symbol (e.g., C2, C5, D2, T, O, I) or H for helical symmetry.
       */
      symbol: string;
      /**
       * Symmetry type refers to point group or helical symmetry of identical polymeric subunits. Contains point group types (e.g. Cyclic, Dihedral) or Helical for helical symmetry.
       */
      type: "Asymmetric" | "Cyclic" | "Dihedral" | "Tetrahedral" | "Octahedral" | "Icosahedral" | "Helical";
      /**
       * Stoichiometry of a complex represents the quantitative description and composition of its subunits.
       *
       * @minItems 1
       */
      stoichiometry: [string, ...string[]];
      /**
       * Oligomeric state refers to a composition of polymeric subunits in quaternary structure. Quaternary structure may be composed either exclusively of several copies of identical subunits, in which case they are termed homo-oligomers, or alternatively by at least one copy of different subunits (hetero-oligomers). Quaternary structure composed of a single subunit is denoted as 'Monomer'.
       */
      oligomeric_state: string;
      /**
       * Clusters describe grouping of 'identical' subunits.
       *
       * @minItems 1
       */
      clusters: [
        {
          /**
           * @minItems 1
           */
          members: [
            {
              /**
               * Internal chain ID used in mmCIF files to uniquely identify structural elements in the asymmetric unit.
               */
              asym_id: string;
              /**
               * Optional list of operator ids (pdbx_struct_oper_list.id) as appears in pdbx_struct_assembly_gen.oper_expression. One operator id per operand in the expression (most cases have only 1 operator). If it's not given then identity operator is assumed.
               *
               * @minItems 1
               */
              pdbx_struct_oper_list_ids?: [string, ...string[]];
            },
            ...{
              /**
               * Internal chain ID used in mmCIF files to uniquely identify structural elements in the asymmetric unit.
               */
              asym_id: string;
              /**
               * Optional list of operator ids (pdbx_struct_oper_list.id) as appears in pdbx_struct_assembly_gen.oper_expression. One operator id per operand in the expression (most cases have only 1 operator). If it's not given then identity operator is assumed.
               *
               * @minItems 1
               */
              pdbx_struct_oper_list_ids?: [string, ...string[]];
            }[]
          ];
          /**
           * Average RMSD between members of a given cluster.
           */
          avg_rmsd?: number;
        },
        ...{
          /**
           * @minItems 1
           */
          members: [
            {
              /**
               * Internal chain ID used in mmCIF files to uniquely identify structural elements in the asymmetric unit.
               */
              asym_id: string;
              /**
               * Optional list of operator ids (pdbx_struct_oper_list.id) as appears in pdbx_struct_assembly_gen.oper_expression. One operator id per operand in the expression (most cases have only 1 operator). If it's not given then identity operator is assumed.
               *
               * @minItems 1
               */
              pdbx_struct_oper_list_ids?: [string, ...string[]];
            },
            ...{
              /**
               * Internal chain ID used in mmCIF files to uniquely identify structural elements in the asymmetric unit.
               */
              asym_id: string;
              /**
               * Optional list of operator ids (pdbx_struct_oper_list.id) as appears in pdbx_struct_assembly_gen.oper_expression. One operator id per operand in the expression (most cases have only 1 operator). If it's not given then identity operator is assumed.
               *
               * @minItems 1
               */
              pdbx_struct_oper_list_ids?: [string, ...string[]];
            }[]
          ];
          /**
           * Average RMSD between members of a given cluster.
           */
          avg_rmsd?: number;
        }[]
      ];
      /**
       * Specifies a single or multiple rotation axes through the same point.
       *
       * @minItems 1
       */
      rotation_axes?: [
        {
          /**
           * Describes x,y,z coordinate of the start point of the symmetry axis.
           *
           * @minItems 3
           * @maxItems 3
           */
          start: [number, number, number];
          /**
           * Describes x,y,z coordinates of the end point of the symmetry axis.
           *
           * @minItems 3
           * @maxItems 3
           */
          end: [number, number, number];
          /**
           * The number of times (order of rotation) that a subunit can be repeated by a rotation operation, being transformed into a new state indistinguishable from its starting state.
           */
          order?: number;
        },
        ...{
          /**
           * Describes x,y,z coordinate of the start point of the symmetry axis.
           *
           * @minItems 3
           * @maxItems 3
           */
          start: [number, number, number];
          /**
           * Describes x,y,z coordinates of the end point of the symmetry axis.
           *
           * @minItems 3
           * @maxItems 3
           */
          end: [number, number, number];
          /**
           * The number of times (order of rotation) that a subunit can be repeated by a rotation operation, being transformed into a new state indistinguishable from its starting state.
           */
          order?: number;
        }[]
      ];
      /**
       * The granularity at which the symmetry calculation is performed. In 'Global Symmetry' all polymeric subunits in assembly are used. In 'Local Symmetry' only a subset of polymeric subunits is considered. In 'Pseudo Symmetry' the threshold for subunits similarity is relaxed.
       */
      kind: "Global Symmetry" | "Pseudo Symmetry" | "Local Symmetry";
    }[]
  ];
  /**
   * The title and version of software package used for symmetry calculations.
   */
  rcsb_struct_symmetry_provenance_code?: string;
  /**
   * @minItems 1
   */
  rcsb_struct_symmetry_lineage?: [
    {
      /**
       * Automatically assigned ID to uniquely identify the symmetry term in the Protein Symmetry Browser.
       */
      id?: string;
      /**
       * A human-readable term describing protein symmetry.
       */
      name?: string;
      /**
       * Hierarchy depth.
       */
      depth?: number;
    },
    ...{
      /**
       * Automatically assigned ID to uniquely identify the symmetry term in the Protein Symmetry Browser.
       */
      id?: string;
      /**
       * A human-readable term describing protein symmetry.
       */
      name?: string;
      /**
       * Hierarchy depth.
       */
      depth?: number;
    }[]
  ];
  /**
   * @minItems 1
   */
  rcsb_assembly_feature?: [
    {
      /**
       * Identifies the version of the feature assignment.
       */
      assignment_version?: string;
      /**
       * A description for the feature.
       */
      description?: string;
      /**
       * An identifier for the feature.
       */
      feature_id?: string;
      /**
       * A name for the feature.
       */
      name?: string;
      /**
       * Code identifying the individual, organization or program that
       *  assigned the feature.
       */
      provenance_source?: string;
      /**
       * A type or category of the feature.
       */
      type?: "MCSA";
      /**
       * This container groups together chain-level identifiers of the assigned features.
       */
      feature_positions?: {
        /**
         * An identifier for the monomer at which this segment of the feature begins.
         */
        beg_seq_id: number;
        /**
         * An identifier for the monomer at which this segment of the feature ends.
         */
        end_seq_id?: number;
        values?: number[];
        /**
         * An identifier of polymer chain (label_asym_id) corresponding to the feature assignment.
         */
        asym_id: string;
        /**
         * pdbx_struct_oper_list_ids of the chain instance.
         */
        struct_oper_list: string[];
      }[];
      additional_properties?: {
        /**
         * The additional property name.
         */
        name?: "MCSA_MOTIF_COMPATIBILITY";
        values?: (string | number | number)[];
      }[];
    },
    ...{
      /**
       * Identifies the version of the feature assignment.
       */
      assignment_version?: string;
      /**
       * A description for the feature.
       */
      description?: string;
      /**
       * An identifier for the feature.
       */
      feature_id?: string;
      /**
       * A name for the feature.
       */
      name?: string;
      /**
       * Code identifying the individual, organization or program that
       *  assigned the feature.
       */
      provenance_source?: string;
      /**
       * A type or category of the feature.
       */
      type?: "MCSA";
      /**
       * This container groups together chain-level identifiers of the assigned features.
       */
      feature_positions?: {
        /**
         * An identifier for the monomer at which this segment of the feature begins.
         */
        beg_seq_id: number;
        /**
         * An identifier for the monomer at which this segment of the feature ends.
         */
        end_seq_id?: number;
        values?: number[];
        /**
         * An identifier of polymer chain (label_asym_id) corresponding to the feature assignment.
         */
        asym_id: string;
        /**
         * pdbx_struct_oper_list_ids of the chain instance.
         */
        struct_oper_list: string[];
      }[];
      additional_properties?: {
        /**
         * The additional property name.
         */
        name?: "MCSA_MOTIF_COMPATIBILITY";
        values?: (string | number | number)[];
      }[];
    }[]
  ];
  /**
   * @minItems 1
   */
  rcsb_assembly_annotation?: [
    {
      /**
       * An identifier for the annotation.
       */
      annotation_id?: string;
      /**
       * Identifies the version of the annotation assignment.
       */
      assignment_version?: string;
      /**
       * A description for the annotation.
       */
      description?: string;
      /**
       * A name for the annotation.
       */
      name?: string;
      /**
       * Code identifying the individual, organization or program that
       *  assigned the annotation.
       */
      provenance_source?: string;
      /**
       * A type or category of the annotation.
       */
      type?: "MCSA";
      additional_properties?: {
        /**
         * The additional property name.
         */
        name?: "MCSA_MOTIF_COMPATIBILITY";
        values?: (string | number | number)[];
      }[];
    },
    ...{
      /**
       * An identifier for the annotation.
       */
      annotation_id?: string;
      /**
       * Identifies the version of the annotation assignment.
       */
      assignment_version?: string;
      /**
       * A description for the annotation.
       */
      description?: string;
      /**
       * A name for the annotation.
       */
      name?: string;
      /**
       * Code identifying the individual, organization or program that
       *  assigned the annotation.
       */
      provenance_source?: string;
      /**
       * A type or category of the annotation.
       */
      type?: "MCSA";
      additional_properties?: {
        /**
         * The additional property name.
         */
        name?: "MCSA_MOTIF_COMPATIBILITY";
        values?: (string | number | number)[];
      }[];
    }[]
  ];
  rcsb_latest_revision?: {
    /**
     * The major version number of the latest revision.
     */
    major_revision?: number;
    /**
     * The minor version number of the latest revision.
     */
    minor_revision?: number;
    /**
     * The release date of the latest revision item.
     */
    revision_date?: string;
    [k: string]: unknown;
  };
}
